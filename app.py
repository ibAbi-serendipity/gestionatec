from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
from google_sheets import obtener_productos, get_inventory_sheet_for_number  # Importamos la funci√≥n para obtener los productos

app = Flask(__name__)

user_states = {}  # Aqu√≠ definimos el diccionario para guardar el estado de los usuarios

@app.route("/webhook", methods=["POST"])
def whatsapp_bot():
    incoming_msg = request.values.get("Body", "").strip()
    phone_number = request.values.get("From", "").replace("whatsapp:", "").replace("+", "")
    
    print(f"üì± Mensaje recibido de {phone_number}: {incoming_msg}")
    
    resp = MessagingResponse()
    msg = resp.message()
    
    if incoming_msg.lower() in ["hola", "menu", "inicio"]:
        user_states.pop(phone_number, None)  # Limpiamos el estado del usuario
        menu = (
            "üëã ¬°Bienvenido al bot de inventario!\n"
            "Elige una opci√≥n:\n"
            "1Ô∏è‚É£ Ver productos\n"
            "2Ô∏è‚É£ Filtrar por c√≥digo\n"
            "3Ô∏è‚É£ Agregar producto\n"
            "4Ô∏è‚É£ Actualizar producto\n"
            "5Ô∏è‚É£ Eliminar producto\n"
            "6Ô∏è‚É£ Registrar entrada\n"
            "7Ô∏è‚É£ Registrar salida\n"
            "8Ô∏è‚É£ Reporte\n"
            "9Ô∏è‚É£ Sugerencias de compra\n"
            "0Ô∏è‚É£ Revisar stock m√≠nimo / vencimiento"
        )
        msg.body(menu)
        return str(resp)

    # Opci√≥n 1: Ver productos
    elif incoming_msg == "1":
        hoja_cliente = get_inventory_sheet_for_number(phone_number)
        if not hoja_cliente:
            msg.body("‚ùå No se encontr√≥ la hoja de productos para tu n√∫mero.")
        else:
            productos = obtener_productos(hoja_cliente)
            if productos is None:
                msg.body("‚ö†Ô∏è Hubo un error al leer los productos. Intenta nuevamente.")
            elif not productos:
                msg.body("üì≠ No hay productos registrados.")
            else:
                respuesta = "üì¶ *Productos en inventario:*\n"
                for i, p in enumerate(productos, start=1):
                    respuesta += (
                        f"{i}. *{p['nombre']}* ({p['marca']}) - {p['codigo']}\n"
                        f"   üóìÔ∏è Vence: {p['fecha']} | üì¶ Stock: {p['cantidad']} | üí∞ S/ {p['precio']}\n"
                    )
                msg.body(respuesta)

    # Opci√≥n 2: Filtrar por c√≥digo
    elif incoming_msg == "2":
        pass

    # Opci√≥n 3: Agregar producto
    elif incoming_msg == "3":
        user_states[phone_number] = {"step": "esperando_datos"}
        msg.body("Por favor env√≠a los datos del producto en este formato:\n"
                 "Nombre, Marca, Fecha de vencimiento (AAAA-MM-DD), Costo, Cantidad, Precio, Stock M√≠nimo, Fecha de compra (AAAA-MM-DD)\n")

    elif phone_number in user_states:
        estado = user_states[phone_number]

        # Paso 1: Esperar datos
        if estado["step"] == "esperando_datos":
            partes = [x.strip() for x in incoming_msg.split(",")]
            if len(partes) != 8:
                msg.body("‚ùå Formato incorrecto. Aseg√∫rate de enviar: Nombre, Marca, Fecha, Costo, Cantidad, Precio, Stock M√≠nimo")
            else:
                estado.update({
                    "nombre": partes[0],
                    "marca": partes[1],
                    "fecha": partes[2],
                    "costo": partes[3],
                    "cantidad": partes[4],
                    "precio": partes[5],
                    "stock_minimo": partes[6],
                    "ultima_compra": partes[7],
                    "step": "esperando_categoria"
                })
                msg.body("üì¶ ¬øCu√°l es la categor√≠a del producto? (perecible / no perecible / limpieza / herramienta o material)")

        # Paso 2: Esperar categor√≠a
        elif estado["step"] == "esperando_categoria":
            categorias = {
                "perecible": "1",
                "no perecible": "2",
                "limpieza": "3",
                "herramienta o material": "4"
            }
            cat = incoming_msg.lower()
            if cat not in categorias:
                msg.body("‚ùå Categor√≠a no v√°lida. Elige: perecible / no perecible / limpieza / herramienta o material")
            else:
                estado["categoria"] = categorias[cat]
                estado["step"] = "esperando_empaque"
                msg.body("üì¶ ¬øCu√°l es el tipo de empaque? (unidad / caja / bolsa / paquete / saco / botella / lata / tetrapack / sobre)")

        # Paso 3: Esperar empaque y guardar
        elif estado["step"] == "esperando_empaque":
            empaque = incoming_msg.strip().lower()
            if not empaque:
                msg.body("‚ùå Tipo de empaque no v√°lido.")
            else:
                estado["empaque"] = empaque
                hoja = get_inventory_sheet_for_number(phone_number)
                if not hoja:
                    msg.body("‚ùå No se pudo acceder a tu hoja de inventario.")
                    return str(resp)

                # Leer productos para determinar correlativo
                productos = hoja.get_all_values()
                encabezados = productos[0] if productos else []
                data = productos[1:] if len(productos) > 1 else []
                correlativos = [
                    int(p[0][-2:]) for p in data
                    if p[0].startswith(estado["categoria"] + estado["marca"][0].upper() + empaque[0].upper())
                    and len(p[0]) >= 4 and p[0][-2:].isdigit()
                ]
                nuevo_num = str(max(correlativos, default=0) + 1).zfill(2)
                codigo = estado["categoria"] + estado["marca"][0].upper() + empaque[0].upper() + nuevo_num

                nuevo_producto = [
                    codigo,
                    estado["nombre"],
                    estado["marca"],
                    estado["fecha"],
                    estado["costo"],
                    estado["cantidad"],
                    estado["precio"],
                    estado["stock_minimo"],
                    estado["ultima_compra"],
                    ""  # √∫ltima compra (puede llenarse luego)
                ]
                hoja.append_row(nuevo_producto)
                msg.body(f"‚úÖ Producto '{estado['nombre']}' agregado con c√≥digo {codigo}.\n"
                        "¬øDeseas registrar otro producto? (s√≠ / no)")
                estado.clear()
                estado["step"] = "confirmar_continuar"
                return str(resp)
        
        # Paso final: Confirmar si desea registrar otro
        elif estado["step"] == "confirmar_continuar":
            if incoming_msg.lower() in ["s√≠", "si"]:
                estado["step"] = "esperando_datos"
                msg.body("Por favor env√≠a los datos del nuevo producto en este formato:\n"
                         "Nombre, Marca, Fecha (AAAA-MM-DD), Costo, Cantidad, Precio, Stock M√≠nimo")
            elif incoming_msg.lower() == "no":
                user_states.pop(phone_number)
                msg.body("üìã Has salido del registro de productos. Escribe 'menu' para ver las opciones.")
            else:
                msg.body("‚ùì Respuesta no v√°lida. Escribe 's√≠' para registrar otro producto o 'no' para salir.")

    else:
        msg.body("Env√≠a 'menu' para ver las opciones disponibles.")

    return str(resp)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)